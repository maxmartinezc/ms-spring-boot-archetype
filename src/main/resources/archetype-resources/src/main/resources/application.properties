server.port=${appPort}
spring.profiles.active=@activatedProperties@
spring.application.name=@project.name@
app.version=@project.version@
server.servlet.context-path=/example/v1/

#if (${mysql} == "si" || ${mysql} == "SI")
#CONEXION BD MYSQL
#spring.datasource.url=jdbc:mysql://localhost/test
#spring.datasource.username=user
#spring.datasource.password=pwd
#spring.datasource.driverClassName=com.mysql.jdbc.Driver
#spring.datasource.platform=mysql
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

#https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration
#A typical MySQL configuration for HikariCP might look something like this:
#spring.datasource.hikari.data-source-properties.cachePrepStmts=true
#spring.datasource.hikari.data-source-properties.prepStmtCacheSize=250
#spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit=2048
#spring.datasource.hikari.data-source-properties.useServerPrepStmts=true
#spring.datasource.hikari.data-source-properties.useLocalSessionState=true
#spring.datasource.hikari.data-source-properties.rewriteBatchedStatements=true
#spring.datasource.hikari.data-source-properties.cacheResultSetMetadata=true
#spring.datasource.hikari.data-source-properties.cacheServerConfiguration=true
#spring.datasource.hikari.data-source-properties.elideSetAutoCommits=false
#spring.datasource.hikari.data-source-properties.maintainTimeStats=false

# HikariCP settings
#spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.hikari.pool-name=pool-hikari-loyalty
#spring.datasource.hikari.maximum-pool-size=10
#end

#if (${postgresql} == "si" || ${postgresql} == "SI")
#CONEXION BD POSTGRESQL
#spring.datasource.url=jdbc:postgresql://localhost:5432/test
#spring.datasource.hikari.jdbc-url=jdbc:postgresql://localhost:5432/test
#spring.datasource.hikari.username=user
#spring.datasource.hikari.password=pwd
#spring.datasource.hikari.driver-class-name=org.postgresql.Driver
#spring.datasource.hikari.connection-test-query=SELECT 1

#HikariCP settings
# Hikari will use the above plus the following to setup connection pooling
#(int) The minimum number of active connections that can be allocated from this pool at the same time.
#spring.datasource.hikari.minimumIdle=5
#(int) The maximum number of active connections that can be allocated from this pool at the same time.
#spring.datasource.hikari.maximumPoolSize=10
#(int) The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned before throwing an exception.
#spring.datasource.hikari.connectionTimeout=30000
#spring.datasource.hikari.idleTimeout=30000
#spring.datasource.hikari.maxLifetime=2000000

#JPA
#spring.jpa.database-platform=org.postgresql.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#end